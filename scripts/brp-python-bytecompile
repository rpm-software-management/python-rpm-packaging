#!/bin/bash
errors_terminate=$2

# If you have *.py files outside of the /usr/lib(64)?/pythonX.Y/
# directories and you require those files to be byte compiled
# (e.g. itâ€™s an importable Python module) you MUST compile them
# explicitly using the %py_byte_compile macro. Note that not all
# Python files are importable Python modules; when in doubt, grep the
# sources for the appropriate import statement.
#
# Therefore $1 ($default_python) is not needed and is invoked with ""
# by default.  $default_python stays in the arguments for backward
# compatibility and so does $extra, for the following check:
extra=$3
if [ 0$extra -eq 1 ]; then
    echo -e "%_python_bytecompile_extra is discontinued, use %py_byte_compile instead.\n" >/dev/stderr
    exit 1
fi

# If using normal root, avoid changing anything.
if [ -z "$RPM_BUILD_ROOT" ] || [ "$RPM_BUILD_ROOT" = "/" ]; then
	exit 0
fi

# Figure out how deep we need to descend.  We could pick an insanely high
# number and hope it's enough, but somewhere, somebody's sure to run into it.
depth=`(find "$RPM_BUILD_ROOT" -type f -name "*.py" -print0 ; echo /) | \
       xargs -0 -n 1 dirname | sed 's,[^/],,g' | sort -u | tail -n 1 | wc -c`
if [ -z "$depth" ] || [ "$depth" -le "1" ]; then
	exit 0
fi

function python_bytecompile()
{
    local options=$1
    local python_binary=$2
    local exclude=$3
    local python_libdir=$4
    local depth=$5
    local real_libdir=$6

cat << EOF | $python_binary $options
import compileall, sys, os, re

python_libdir = "$python_libdir"
depth = $depth
real_libdir = "$real_libdir"
build_root = "$RPM_BUILD_ROOT"
exclude = r"$exclude"

class Filter:
    def search(self, path):
        ret = not os.path.realpath(path).startswith(build_root)
        if exclude:
            ret = ret or re.search(exclude, path)
        return ret

sys.exit(not compileall.compile_dir(python_libdir, depth, real_libdir, force=1, rx=Filter(), quiet=1))
EOF
}

# .pyc/.pyo files embed a "magic" value, identifying the ABI version of Python
# bytecode that they are for.
#
# The files below RPM_BUILD_ROOT could be targeting multiple versions of
# python (e.g. a single build that emits several subpackages e.g. a
# python26-foo subpackage, a python31-foo subpackage etc)
#
# Support this by assuming that below each /usr/lib/python$VERSION/, all
# .pyc/.pyo files are to be compiled for /usr/bin/python$VERSION.
#
# For example, below /usr/lib/python2.6/, we're targeting /usr/bin/python2.6
# and below /usr/lib/python3.1/, we're targeting /usr/bin/python3.1

# Disable Python hash seed randomization
# This helps to make byte-compilation more reproducible
export PYTHONHASHSEED=0

shopt -s nullglob
for python_libdir in `find "$RPM_BUILD_ROOT" -type d|grep -E "/usr/lib(64)?/python[0-9]\.[0-9]+$"`;
do
	python_binary=/usr/bin/$(basename $python_libdir)
	real_libdir=${python_libdir/$RPM_BUILD_ROOT/}
	echo "Bytecompiling .py files below $python_libdir using $python_binary"

	# Generate normal (.pyc) byte-compiled files.
	python_bytecompile "" "$python_binary" "" "$python_libdir" "$depth" "$real_libdir"
	if [ $? -ne 0 ] && [ 0$errors_terminate -ne 0 ]; then
		# One or more of the files had a syntax error
		exit 1
	fi

	# Generate optimized (.pyo) byte-compiled files.
	python_bytecompile "-O" "$python_binary" "" "$python_libdir" "$depth" "$real_libdir"
	if [ $? -ne 0 ] && [ 0$errors_terminate -ne 0 ]; then
		# One or more of the files had a syntax error
		exit 1
	fi
done
